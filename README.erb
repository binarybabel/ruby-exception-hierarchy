# Ruby Exception Hierarchy

**User reference of Ruby Language core exceptions in tree-format.**

[![Build Status](https://travis-ci.org/binarybabel/ruby-exception-hierarchy.svg?branch=latest)](https://travis-ci.org/binarybabel/ruby-exception-hierarchy) [![Latestver](https://lv.binarybabel.org/catalog-api/ruby/latest.svg?v=<%= RUBY_VERSION %>)](https://lv.binarybabel.org/catalog/ruby/latest)

The latest branch is updated automatically when new versions of Ruby are released, through the use of webhooks provided by the [Latestver](https://lv.binarybabel.org) dependency tracking tool, a [BinaryBabel OSS Project](https://github.com/binarybabel/latestver#readme). _Check the [GitHub Tags](https://github.com/binarybabel/ruby-exception-hierarchy/releases) to review older results._

## Ruby <%= RUBY_VERSION %> Exceptions

_**`rescue`** statements default to `StandardError` and sub-classes_

```
<%= # GENERATE EXCEPTION HIERARCHY

exceptions_discovered = []
exceptions_hierarchy  = {}

ObjectSpace.each_object(Class) do |klass|
  next unless klass.ancestors.include? Exception
  next if exceptions_discovered.include? klass
  next if klass.superclass == SystemCallError
  exceptions_discovered << klass
  klass.ancestors.delete_if {|e| [Object, Kernel].include? e }.reverse.inject(exceptions_hierarchy) {|memo,klass| memo[klass] ||= {}}
end

tree_printer = Proc.new do |t, indent, swap|
  t.keys.sort { |c1,c2| c1.name <=> c2.name }.each do |k|
    next unless k.to_s.index('::').nil?
    space = (' ' * indent); space ||= ''
    swap.push(space + k.to_s)
    tree_printer.call t[k], indent+2, swap
  end
  swap
end

output = tree_printer.call exceptions_hierarchy, 0, []
output.join("\n")

#
# Exception tree adapted from code by Nick Sieger
# http://blog.nicksieger.com/articles/2006/09/06/rubys-exception-hierarchy/
#
%>
```

## Maintainer
* The build mechanics for this project are available at:
  * https://github.com/binarybabel/ruby-exception-hierarchy/tree/worker
* Unless otherwise noted, all source-controlled files are released under the [MIT License](https://opensource.org/licenses/MIT).


                                                                                  0101010
                                                                               0010011
                                                                             110101
                                                                           0011
                                                                                    0100010
                                                                       1010    0010101000001
                                                                      010101110100111101010010
                                                                     01     0011000100
                 Project maintained by BinaryBabel
                                                                       0100
                                                                    01001001    binarybabel.org
                                                                   0100111001    000001010001110
                                                                  101       0010010000010100100101
                                                              00111          0010011110100011001010
                                                              0110            10000010100111001000100
